{"remainingRequest":"/Users/mmcallen/Documents/03_Other/01_Dev_work/01_Dev_tutorials/20_ripple_2/vue-boilerplate/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/mmcallen/Documents/03_Other/01_Dev_work/01_Dev_tutorials/20_ripple_2/vue-boilerplate/src/components/Scene.vue?vue&type=style&index=0&lang=scss&","dependencies":[{"path":"/Users/mmcallen/Documents/03_Other/01_Dev_work/01_Dev_tutorials/20_ripple_2/vue-boilerplate/src/components/Scene.vue","mtime":1601892687691},{"path":"/Users/mmcallen/Documents/03_Other/01_Dev_work/01_Dev_tutorials/20_ripple_2/vue-boilerplate/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/mmcallen/Documents/03_Other/01_Dev_work/01_Dev_tutorials/20_ripple_2/vue-boilerplate/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/Users/mmcallen/Documents/03_Other/01_Dev_work/01_Dev_tutorials/20_ripple_2/vue-boilerplate/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/Users/mmcallen/Documents/03_Other/01_Dev_work/01_Dev_tutorials/20_ripple_2/vue-boilerplate/node_modules/sass-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/mmcallen/Documents/03_Other/01_Dev_work/01_Dev_tutorials/20_ripple_2/vue-boilerplate/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/mmcallen/Documents/03_Other/01_Dev_work/01_Dev_tutorials/20_ripple_2/vue-boilerplate/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgojc2NlbmUtY29udGFpbmVyIHsKICAgIGZvbnQtZmFtaWx5OiBBdmVuaXIsIEhlbHZldGljYSwgQXJpYWwsIHNhbnMtc2VyaWY7CiAgICAtd2Via2l0LWZvbnQtc21vb3RoaW5nOiBhbnRpYWxpYXNlZDsKICAgIC1tb3otb3N4LWZvbnQtc21vb3RoaW5nOiBncmF5c2NhbGU7CiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7CiAgICBjb2xvcjogIzJjM2U1MDsKICAgIG1hcmdpbi10b3A6IDA7CiAgICBwb3NpdGlvbjogYWJzb2x1dGU7CiAgICB3aWR0aDogMTAwJTsKICAgIGhlaWdodDogMTAwJTsKfQoKI2luZm8gewogICAgcG9zaXRpb246IGFic29sdXRlOwogICAgdG9wOiAxMHB4OwogICAgd2lkdGg6IDEwMCU7CiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7CiAgICB6LWluZGV4OiAxMDA7CiAgICBkaXNwbGF5OmJsb2NrOwp9Cg=="},{"version":3,"sources":["Scene.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA0KA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"Scene.vue","sourceRoot":"src/components","sourcesContent":["<template>\n    <div id=\"scene-container\">\n    </div>\n</template>\n\n<script>\n    import * as THREE from 'three';\n    import { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';\n    import WEBGL from '../mixins/webgl';\n\n    let container;\n    let camera;\n    let renderer;\n    let scene;\n    let mainLight;\n    let ambientLight;\n    let controls;\n    let materials;\n    let geometries;\n\n    export default {\n        name: 'Scene',\n        components: {},\n        mounted() {\n            this.bindEvents();\n            this.initialiseScene();\n        },\n        methods: {\n            initialiseScene() {\n                container = document.querySelector('#scene-container');\n                scene = new THREE.Scene();\n                scene.background = new THREE.Color('skyblue');\n\n                this.createCamera();\n                this.createLights();\n                this.createMeshes();\n                this.createRenderer();\n                this.createControls();\n\n                if (WEBGL.isWebGLAvailable()) {\n                    renderer.setAnimationLoop(() => {\n                        this.update();\n                        this.render();\n                    });\n                } else {\n                    const warning = WEBGL.getWebGLErrorMessage();\n                    container.appendChild(warning);\n                }\n            },\n            createCamera() {\n                const fov = 35; // AKA Field of View\n                const aspect = container.clientWidth / container.clientHeight;\n                const near = 0.1; // the near clipping plane\n                const far = 100; // the far clipping plane\n                camera = new THREE.PerspectiveCamera(fov, aspect, near, far);\n                camera.position.set(-5, 5, 7);\n            },\n            createLights() {\n                ambientLight = new THREE.HemisphereLight(\n                    0xddeeff, // sky color\n                    0x202020, // ground color\n                    0.5, // intensity\n                );\n\n                mainLight = new THREE.DirectionalLight(0xffffff, 3);\n                mainLight.position.set(10, 10, 10);\n\n                scene.add(ambientLight, mainLight);\n            },\n            createMeshes() {\n                materials = this.createMaterials();\n                geometries = this.createGeometries();\n                const train = new THREE.Group();\n                scene.add(train);\n\n                const nose = new THREE.Mesh(geometries.nose, materials.body);\n                nose.rotation.z = Math.PI / 2;\n                nose.position.x = -1;\n\n                const cabin = new THREE.Mesh(geometries.cabin, materials.body);\n                cabin.position.set(1.5, 0.4, 0);\n\n                const chimney = new THREE.Mesh(geometries.chimney, materials.detail);\n                chimney.position.set(-2, 0.9, 0);\n\n                const smallWheelRear = new THREE.Mesh(geometries.wheel, materials.detail);\n                smallWheelRear.position.set(0, -0.5, 0);\n\n                const smallWheelCenter = smallWheelRear.clone();\n                smallWheelCenter.position.x = -1;\n\n                const smallWheelFront = smallWheelRear.clone();\n                smallWheelFront.position.x = -2;\n\n                const bigWheel = smallWheelRear.clone();\n                bigWheel.scale.set(2, 2, 1.25);\n                bigWheel.position.set(1.5, -0.1, 0);\n\n                train.add(\n                    nose,\n                    cabin,\n                    chimney,\n                    smallWheelRear,\n                    smallWheelCenter,\n                    smallWheelFront,\n                    bigWheel,\n                );\n            },\n            createGeometries() {\n                const nose = new THREE.CylinderBufferGeometry(0.75, 0.75, 3, 60);\n                const cabin = new THREE.BoxBufferGeometry(2, 2.25, 1.5);\n                const chimney = new THREE.CylinderBufferGeometry(0.3, 0.1, 0.5, 20);\n                const wheel = new THREE.CylinderBufferGeometry(0.4, 0.4, 1.75, 60);\n                wheel.rotateX(Math.PI / 2);\n\n                return {\n                    nose, cabin, chimney, wheel,\n                };\n            },\n            createMaterials() {\n                const body = new THREE.MeshStandardMaterial({\n                    color: 0xff3333, // red\n                    flatShading: true,\n                });\n                body.color.convertSRGBToLinear();\n\n                const detail = new THREE.MeshStandardMaterial({\n                    color: 0x333333, // darkgrey\n                    flatShading: true,\n                });\n                detail.color.convertSRGBToLinear();\n\n                return {\n                    body,\n                    detail,\n                };\n            },\n            createRenderer() {\n                renderer = new THREE.WebGLRenderer({ antialias: true });\n                renderer.setSize(container.clientWidth, container.clientHeight);\n                renderer.setPixelRatio(window.devicePixelRatio);\n                renderer.gammaFactor = 2.2;\n                renderer.gammaOutput = true;\n                container.appendChild(renderer.domElement);\n            },\n            createControls() {\n                controls = new OrbitControls(camera, container);\n                console.log(controls);\n            },\n            update() {\n\n            },\n            render() {\n                renderer.render(scene, camera);\n            },\n            bindEvents() {\n                window.addEventListener('resize', this.onWindowResize, false);\n            },\n            onWindowResize() {\n                camera.aspect = container.clientWidth / container.clientHeight;\n                // update the camera's frustum\n                camera.updateProjectionMatrix();\n                renderer.setSize(container.clientWidth, container.clientHeight);\n            },\n        },\n\n    };\n</script>\n\n<style lang=\"scss\">\n    #scene-container {\n        font-family: Avenir, Helvetica, Arial, sans-serif;\n        -webkit-font-smoothing: antialiased;\n        -moz-osx-font-smoothing: grayscale;\n        text-align: center;\n        color: #2c3e50;\n        margin-top: 0;\n        position: absolute;\n        width: 100%;\n        height: 100%;\n    }\n\n    #info {\n        position: absolute;\n        top: 10px;\n        width: 100%;\n        text-align: center;\n        z-index: 100;\n        display:block;\n    }\n</style>\n"]}]}