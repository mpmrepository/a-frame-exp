{"remainingRequest":"/Users/mmcallen/Documents/03_Other/01_Dev_work/01_Dev_tutorials/20_ripple_2/vue-boilerplate/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/mmcallen/Documents/03_Other/01_Dev_work/01_Dev_tutorials/20_ripple_2/vue-boilerplate/src/App.vue?vue&type=style&index=0&id=7ba5bd90&scoped=true&lang=scss&","dependencies":[{"path":"/Users/mmcallen/Documents/03_Other/01_Dev_work/01_Dev_tutorials/20_ripple_2/vue-boilerplate/src/App.vue","mtime":1600434263627},{"path":"/Users/mmcallen/Documents/03_Other/01_Dev_work/01_Dev_tutorials/20_ripple_2/vue-boilerplate/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/mmcallen/Documents/03_Other/01_Dev_work/01_Dev_tutorials/20_ripple_2/vue-boilerplate/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/Users/mmcallen/Documents/03_Other/01_Dev_work/01_Dev_tutorials/20_ripple_2/vue-boilerplate/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/Users/mmcallen/Documents/03_Other/01_Dev_work/01_Dev_tutorials/20_ripple_2/vue-boilerplate/node_modules/sass-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/mmcallen/Documents/03_Other/01_Dev_work/01_Dev_tutorials/20_ripple_2/vue-boilerplate/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/mmcallen/Documents/03_Other/01_Dev_work/01_Dev_tutorials/20_ripple_2/vue-boilerplate/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCiNjb250YWluZXIgewogICAgd2lkdGg6IDEwMCU7CiAgICBoZWlnaHQ6IDEwMCU7CiAgICBkaXNwbGF5OiBibG9jazsKICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTsKICAgIHRvcDogMDsKICAgIGxlZnQ6IDA7Cn0K"},{"version":3,"sources":["App.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"App.vue","sourceRoot":"src","sourcesContent":["<template>\n    <div id=\"container\">\n        <div\n            ref=\"three\"\n            class=\"three-container\"\n        />\n    </div>\n</template>\n\n<script>\n    import * as THREE from 'three';\n    import { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader';\n    import { RGBELoader } from 'three/examples/jsm/loaders/RGBELoader';\n\n    let width = window.innerWidth;\n    let height = window.innerHeight;\n\n    const manager = new THREE.LoadingManager();\n    const gltfLoader = new GLTFLoader(manager);\n    const scene = new THREE.Scene();\n    const camera = new THREE.PerspectiveCamera(45, width / height, 0.1, 500);\n    const renderer = new THREE.WebGLRenderer({ antialias: true, alpha: true });\n    camera.position.y = -5;\n    scene.add(camera);\n\n    const cubeRenderTarget = new THREE.WebGLCubeRenderTarget(\n        512, { format: THREE.RGBFormat, generateMipmaps: true, minFilter: THREE.LinearMipmapLinearFilter },\n    );\n\n    const cubeCamera = new THREE.CubeCamera(0.1, 500, cubeRenderTarget);\n    scene.background = cubeCamera.renderTarget;\n\n    let model;\n\n    export default {\n        mounted() {\n            this.setupRenderer();\n            this.setupLights();\n            this.bindEvents();\n\n            gltfLoader.load('../invite-cube-11.glb', (asset) => {\n                const { scenes } = asset;\n                [model] = scenes;\n                model.rotation.x = Math.PI / 2;\n                model.rotateY(THREE.Math.degToRad(180));\n                scene.add(model);\n                model.position.multiplyScalar(-1);\n                camera.lookAt(model.position);\n                this.animate();\n            });\n\n            const pmremGenerator = new THREE.PMREMGenerator(renderer);\n            const texture = new RGBELoader()\n                .setDataType(THREE.UnsignedByteType)\n                .setPath('../textures/')\n                .load('quarry_03_1k.hdr', (t) => {\n                    pmremGenerator.compileEquirectangularShader();\n                    const hdrenvMap = pmremGenerator.fromEquirectangular(t).texture;\n                    scene.environment = hdrenvMap;\n                    texture.dispose();\n                    pmremGenerator.dispose();\n                });\n        },\n        methods: {\n            animate() {\n                const render = () => {\n                    model.rotation.z -= 0.00725;\n                    model.rotation.y -= 0.00725;\n                    requestAnimationFrame(render);\n                    renderer.render(scene, camera);\n                };\n                render();\n            },\n            setupRenderer() {\n                renderer.setClearColor(0xffffff, 0);\n                renderer.gammaOutput = true;\n                renderer.gammaFactor = 2.2;\n                renderer.setSize(width, height);\n                renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2));\n                this.$refs.three.appendChild(renderer.domElement);\n            },\n            setupLights() {\n                const light = new THREE.AmbientLight(0xffffff, 10); // soft white light\n                scene.add(light);\n            },\n            bindEvents() {\n                window.addEventListener('resize', this.onWindowResize, false);\n            },\n            onWindowResize() {\n                width = window.innerWidth;\n                height = window.innerHeight;\n                renderer.setSize(width, height);\n                camera.aspect = width / height;\n                camera.updateProjectionMatrix();\n            },\n        },\n    };\n</script>\n\n<style scoped lang=\"scss\">\n    #container {\n        width: 100%;\n        height: 100%;\n        display: block;\n        position: absolute;\n        top: 0;\n        left: 0;\n    }\n</style>\n"]}]}